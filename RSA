#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

long long mod_exp(long long base, long long exp, long long mod) {
    long long result = 1;
    base = base % mod;

    while (exp > 0) {
        if (exp % 2 == 1)
            result = (result * base) % mod;
        exp = exp >> 1;
        base = (base * base) % mod;
    }

    return result;
}
int mod_inverse(int e, int phi) {
    int t = 0, new_t = 1;
    int r = phi, new_r = e;
    int temp, quotient;

    while (new_r != 0) {
        quotient = r / new_r;

        temp = new_t;
        new_t = t - quotient * new_t;
        t = temp;

        temp = new_r;
        new_r = r - quotient * new_r;
        r = temp;
    }

    if (r > 1)
        return -1;  // Inverse doesn't exist

    if (t < 0)
        t += phi;

    return t;
}

int main() {
    int p = 61; // Example prime
    int q = 53; // Example prime

    int n = p * q;
    int phi = (p - 1) * (q - 1);

    int e = 17; // Commonly used public exponent
    if (gcd(e, phi) != 1) {
        printf("e and phi(n) are not coprime.\n");
        return 1;
    }

    int d = mod_inverse(e, phi);
    if (d == -1) {
        printf("Modular inverse does not exist.\n");
        return 1;
    }

    printf("Public Key: (e=%d, n=%d)\n", e, n);
    printf("Private Key: (d=%d, n=%d)\n", d, n);

    int message = 89;
    printf("\nOriginal Message: %d\n", message);

    // Encrypt
    long long cipher = mod_exp(message, e, n);
    printf("Encrypted Message: %lld\n", cipher);

    // Decrypt
    long long decrypted = mod_exp(cipher, d, n);
    printf("Decrypted Message: %lld\n", decrypted);

    return 0;
}
