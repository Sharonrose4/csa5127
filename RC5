#include <stdio.h>
#include <stdint.h>
#include <string.h>

#define WORD uint32_t
#define W 32
#define R 12
#define B 16
#define PW 0xB7E15163
#define QW 0x9E3779B9
#define BLOCK_SIZE 2

WORD S[2 * (R + 1)];

// Left rotation
WORD ROTL(WORD x, WORD y) {
    return (x << (y & (W - 1))) | (x >> (W - (y & (W - 1))));
}

// Right rotation
WORD ROTR(WORD x, WORD y) {
    return (x >> (y & (W - 1))) | (x << (W - (y & (W - 1))));
}

// Key expansion
void RC5_KeyExpansion(const uint8_t *key) {
    WORD L[B / 4] = {0};

    // Load key into L
    for (int i = B - 1; i >= 0; i--) {
        L[i / 4] = (L[i / 4] << 8) + key[i];
    }

    // Initialize S
    S[0] = PW;
    for (int i = 1; i < 2 * (R + 1); i++) {
        S[i] = S[i - 1] + QW;
    }

    WORD A = 0, B_val = 0;
    int i = 0, j = 0;
    for (int k = 0; k < 3 * (2 * (R + 1)); k++) {
        A = S[i] = ROTL(S[i] + A + B_val, 3);
        B_val = L[j] = ROTL(L[j] + A + B_val, (A + B_val));
        i = (i + 1) % (2 * (R + 1));
        j = (j + 1) % (B / 4);
    }
}

// RC5 block encryption
void RC5_Encrypt(WORD *pt) {
    WORD A = pt[0] + S[0];
    WORD B = pt[1] + S[1];

    for (int i = 1; i <= R; i++) {
        A = ROTL(A ^ B, B) + S[2 * i];
        B = ROTL(B ^ A, A) + S[2 * i + 1];
    }

    pt[0] = A;
    pt[1] = B;
}

// RC5 block decryption
void RC5_Decrypt(WORD *ct) {
    WORD B = ct[1];
    WORD A = ct[0];

    for (int i = R; i >= 1; i--) {
        B = ROTR(B - S[2 * i + 1], A) ^ A;
        A = ROTR(A - S[2 * i], B) ^ B;
    }

    ct[1] = B - S[1];
    ct[0] = A - S[0];
}

int main() {
    uint8_t key[16] = {
        0x91, 0x5F, 0x46, 0x19, 0xBE, 0x41, 0xB2, 0x51,
        0x63, 0x55, 0xA5, 0x01, 0x10, 0xA9, 0xCE, 0x91
    };

    RC5_KeyExpansion(key);

    WORD plaintext[2] = {0x12345678, 0x9ABCDEF0};
    printf("ðŸ”“ Plaintext : %08X %08X\n", plaintext[0], plaintext[1]);

    RC5_Encrypt(plaintext);
    printf("ðŸ”’ Encrypted : %08X %08X\n", plaintext[0], plaintext[1]);

    RC5_Decrypt(plaintext);
    printf("ðŸ”“ Decrypted : %08X %08X\n", plaintext[0], plaintext[1]);

    return 0;
}
